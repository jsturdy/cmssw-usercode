//
// File generated by rootcint at Mon Nov 15 11:20:30 2010

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "myDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef pair< const ::string, bool > pairlEconstsPstringcOboolgR;
      #else
      class pairlEconstsPstringcOboolgR  {
         public:
         //friend XX;
          string first; //
         bool second; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef pair< ::string, bool > pairlEstringcOboolgR;
      #else
      class pairlEstringcOboolgR  {
         public:
         //friend XX;
         string first; //
         bool second; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef pair< const ::string, vector< float, allocator< float >  >  > pairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR;
      #else
      class pairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR  {
         public:
         //friend XX;
          string first; //
         vector< float, allocator< float >  > second; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef pair< ::string, vector< float, allocator< float >  >  > pairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR;
      #else
      class pairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR  {
         public:
         //friend XX;
         string first; //
         vector< float, allocator< float >  > second; //
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator_Dictionary();
   static void *new_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator(void *p = 0);
   static void *newArray_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator(Long_t size, void *p);
   static void delete_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator(void *p);
   static void deleteArray_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator(void *p);
   static void destruct_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator*)
   {
      ::vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator", "prec_stl/vector", 206,
                  typeid(::vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator), DefineBehavior(ptr, ptr),
                  0, &vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator_Dictionary, isa_proxy, 0,
                  sizeof(::vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator) );
      instance.SetNew(&new_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator);
      instance.SetNewArray(&newArray_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator);
      instance.SetDelete(&delete_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator);
      instance.SetDeleteArray(&deleteArray_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator);
      instance.SetDestructor(&destruct_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator*)
   {
      return GenerateInitInstanceLocal((::vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void pairlEconstsPstringcOboolgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void pairlEconstsPstringcOboolgR_Dictionary();
   static void *new_pairlEconstsPstringcOboolgR(void *p = 0);
   static void *newArray_pairlEconstsPstringcOboolgR(Long_t size, void *p);
   static void delete_pairlEconstsPstringcOboolgR(void *p);
   static void deleteArray_pairlEconstsPstringcOboolgR(void *p);
   static void destruct_pairlEconstsPstringcOboolgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const pair<const string,bool>*)
   {
      // Make sure the shadow class has the right sizeof
      pair<const string,bool> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(pair<const string,bool>),0);
      static ::ROOT::TGenericClassInfo 
         instance("pair<const string,bool>", "prec_stl/utility", 17,
                  typeid(pair<const string,bool>), DefineBehavior(ptr, ptr),
                  (void*)&pairlEconstsPstringcOboolgR_ShowMembers, &pairlEconstsPstringcOboolgR_Dictionary, isa_proxy, 4,
                  sizeof(pair<const string,bool>) );
      instance.SetNew(&new_pairlEconstsPstringcOboolgR);
      instance.SetNewArray(&newArray_pairlEconstsPstringcOboolgR);
      instance.SetDelete(&delete_pairlEconstsPstringcOboolgR);
      instance.SetDeleteArray(&deleteArray_pairlEconstsPstringcOboolgR);
      instance.SetDestructor(&destruct_pairlEconstsPstringcOboolgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const pair<const string,bool>*)
   {
      return GenerateInitInstanceLocal((pair<const string,bool>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const pair<const string,bool>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void pairlEconstsPstringcOboolgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const pair<const string,bool>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void pairlEstringcOboolgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void pairlEstringcOboolgR_Dictionary();
   static void *new_pairlEstringcOboolgR(void *p = 0);
   static void *newArray_pairlEstringcOboolgR(Long_t size, void *p);
   static void delete_pairlEstringcOboolgR(void *p);
   static void deleteArray_pairlEstringcOboolgR(void *p);
   static void destruct_pairlEstringcOboolgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const pair<string,bool>*)
   {
      // Make sure the shadow class has the right sizeof
      pair<string,bool> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(pair<string,bool>),0);
      static ::ROOT::TGenericClassInfo 
         instance("pair<string,bool>", "prec_stl/utility", 17,
                  typeid(pair<string,bool>), DefineBehavior(ptr, ptr),
                  (void*)&pairlEstringcOboolgR_ShowMembers, &pairlEstringcOboolgR_Dictionary, isa_proxy, 4,
                  sizeof(pair<string,bool>) );
      instance.SetNew(&new_pairlEstringcOboolgR);
      instance.SetNewArray(&newArray_pairlEstringcOboolgR);
      instance.SetDelete(&delete_pairlEstringcOboolgR);
      instance.SetDeleteArray(&deleteArray_pairlEstringcOboolgR);
      instance.SetDestructor(&destruct_pairlEstringcOboolgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const pair<string,bool>*)
   {
      return GenerateInitInstanceLocal((pair<string,bool>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const pair<string,bool>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void pairlEstringcOboolgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const pair<string,bool>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator_Dictionary();
   static void *new_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator(void *p = 0);
   static void *newArray_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator(Long_t size, void *p);
   static void delete_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator(void *p);
   static void deleteArray_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator(void *p);
   static void destruct_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator*)
   {
      ::map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator", "prec_stl/map", 103,
                  typeid(::map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator_Dictionary, isa_proxy, 0,
                  sizeof(::map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator) );
      instance.SetNew(&new_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator);
      instance.SetNewArray(&newArray_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator);
      instance.SetDelete(&delete_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator);
      instance.SetDeleteArray(&deleteArray_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator);
      instance.SetDestructor(&destruct_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator*)
   {
      return GenerateInitInstanceLocal((::map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void pairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void pairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR_Dictionary();
   static void *new_pairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR(void *p = 0);
   static void *newArray_pairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR(Long_t size, void *p);
   static void delete_pairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR(void *p);
   static void deleteArray_pairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR(void *p);
   static void destruct_pairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const pair<const string,vector<float,allocator<float> > >*)
   {
      // Make sure the shadow class has the right sizeof
      pair<const string,vector<float,allocator<float> > > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(pair<const string,vector<float,allocator<float> > >),0);
      static ::ROOT::TGenericClassInfo 
         instance("pair<const string,vector<float,allocator<float> > >", "prec_stl/utility", 17,
                  typeid(pair<const string,vector<float,allocator<float> > >), DefineBehavior(ptr, ptr),
                  (void*)&pairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR_ShowMembers, &pairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(pair<const string,vector<float,allocator<float> > >) );
      instance.SetNew(&new_pairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR);
      instance.SetNewArray(&newArray_pairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR);
      instance.SetDelete(&delete_pairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR);
      instance.SetDeleteArray(&deleteArray_pairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR);
      instance.SetDestructor(&destruct_pairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const pair<const string,vector<float,allocator<float> > >*)
   {
      return GenerateInitInstanceLocal((pair<const string,vector<float,allocator<float> > >*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const pair<const string,vector<float,allocator<float> > >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void pairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const pair<const string,vector<float,allocator<float> > >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void pairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void pairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR_Dictionary();
   static void *new_pairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR(void *p = 0);
   static void *newArray_pairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR(Long_t size, void *p);
   static void delete_pairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR(void *p);
   static void deleteArray_pairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR(void *p);
   static void destruct_pairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const pair<string,vector<float,allocator<float> > >*)
   {
      // Make sure the shadow class has the right sizeof
      pair<string,vector<float,allocator<float> > > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(pair<string,vector<float,allocator<float> > >),0);
      static ::ROOT::TGenericClassInfo 
         instance("pair<string,vector<float,allocator<float> > >", "prec_stl/utility", 17,
                  typeid(pair<string,vector<float,allocator<float> > >), DefineBehavior(ptr, ptr),
                  (void*)&pairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR_ShowMembers, &pairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(pair<string,vector<float,allocator<float> > >) );
      instance.SetNew(&new_pairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR);
      instance.SetNewArray(&newArray_pairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR);
      instance.SetDelete(&delete_pairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR);
      instance.SetDeleteArray(&deleteArray_pairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR);
      instance.SetDestructor(&destruct_pairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const pair<string,vector<float,allocator<float> > >*)
   {
      return GenerateInitInstanceLocal((pair<string,vector<float,allocator<float> > >*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const pair<string,vector<float,allocator<float> > >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void pairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const pair<string,vector<float,allocator<float> > >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator_Dictionary();
   static void *new_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator(void *p = 0);
   static void *newArray_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator(Long_t size, void *p);
   static void delete_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator(void *p);
   static void deleteArray_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator(void *p);
   static void destruct_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator*)
   {
      ::map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator", "prec_stl/map", 103,
                  typeid(::map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator_Dictionary, isa_proxy, 0,
                  sizeof(::map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator) );
      instance.SetNew(&new_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator);
      instance.SetNewArray(&newArray_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator);
      instance.SetDelete(&delete_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator);
      instance.SetDeleteArray(&deleteArray_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator);
      instance.SetDestructor(&destruct_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator*)
   {
      return GenerateInitInstanceLocal((::map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator : new ::vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator;
   }
   static void *newArray_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator[nElements] : new ::vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator(void *p) {
      delete ((::vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator*)p);
   }
   static void deleteArray_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator(void *p) {
      delete [] ((::vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator*)p);
   }
   static void destruct_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator(void *p) {
      typedef ::vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator : new ::map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator;
   }
   static void *newArray_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator[nElements] : new ::map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator(void *p) {
      delete ((::map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator*)p);
   }
   static void deleteArray_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator(void *p) {
      delete [] ((::map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator*)p);
   }
   static void destruct_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator(void *p) {
      typedef ::map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator

//______________________________________________________________________________
namespace ROOT {
   void pairlEstringcOboolgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent)
   {
      // Inspect the data members of an object of class pair<string,bool>.
      typedef ::ROOT::Shadow::pairlEstringcOboolgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const pair<string,bool>*)0x0)->GetClass();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "first", (void*)&sobj->first);
      ::ROOT::GenericShowMembers("string", (void*)&sobj->first, R__insp, strcat(R__parent,"first."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "second", &sobj->second);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_pairlEstringcOboolgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) pair<string,bool> : new pair<string,bool>;
   }
   static void *newArray_pairlEstringcOboolgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) pair<string,bool>[nElements] : new pair<string,bool>[nElements];
   }
   // Wrapper around operator delete
   static void delete_pairlEstringcOboolgR(void *p) {
      delete ((pair<string,bool>*)p);
   }
   static void deleteArray_pairlEstringcOboolgR(void *p) {
      delete [] ((pair<string,bool>*)p);
   }
   static void destruct_pairlEstringcOboolgR(void *p) {
      typedef pair<string,bool> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class pair<string,bool>

//______________________________________________________________________________
namespace ROOT {
   void pairlEconstsPstringcOboolgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent)
   {
      // Inspect the data members of an object of class pair<const string,bool>.
      typedef ::ROOT::Shadow::pairlEconstsPstringcOboolgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const pair<const string,bool>*)0x0)->GetClass();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "first", (void*)&sobj->first);
      ::ROOT::GenericShowMembers("const string", (void*)&sobj->first, R__insp, strcat(R__parent,"first."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "second", &sobj->second);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_pairlEconstsPstringcOboolgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) pair<const string,bool> : new pair<const string,bool>;
   }
   static void *newArray_pairlEconstsPstringcOboolgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) pair<const string,bool>[nElements] : new pair<const string,bool>[nElements];
   }
   // Wrapper around operator delete
   static void delete_pairlEconstsPstringcOboolgR(void *p) {
      delete ((pair<const string,bool>*)p);
   }
   static void deleteArray_pairlEconstsPstringcOboolgR(void *p) {
      delete [] ((pair<const string,bool>*)p);
   }
   static void destruct_pairlEconstsPstringcOboolgR(void *p) {
      typedef pair<const string,bool> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class pair<const string,bool>

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator : new ::map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator;
   }
   static void *newArray_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator[nElements] : new ::map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator(void *p) {
      delete ((::map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator*)p);
   }
   static void deleteArray_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator(void *p) {
      delete [] ((::map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator*)p);
   }
   static void destruct_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator(void *p) {
      typedef ::map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator

//______________________________________________________________________________
namespace ROOT {
   void pairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent)
   {
      // Inspect the data members of an object of class pair<string,vector<float,allocator<float> > >.
      typedef ::ROOT::Shadow::pairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const pair<string,vector<float,allocator<float> > >*)0x0)->GetClass();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "first", (void*)&sobj->first);
      ::ROOT::GenericShowMembers("string", (void*)&sobj->first, R__insp, strcat(R__parent,"first."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "second", (void*)&sobj->second);
      ::ROOT::GenericShowMembers("vector<float,allocator<float> >", (void*)&sobj->second, R__insp, strcat(R__parent,"second."),false);
      R__parent[R__ncp] = 0;
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_pairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) pair<string,vector<float,allocator<float> > > : new pair<string,vector<float,allocator<float> > >;
   }
   static void *newArray_pairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) pair<string,vector<float,allocator<float> > >[nElements] : new pair<string,vector<float,allocator<float> > >[nElements];
   }
   // Wrapper around operator delete
   static void delete_pairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR(void *p) {
      delete ((pair<string,vector<float,allocator<float> > >*)p);
   }
   static void deleteArray_pairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR(void *p) {
      delete [] ((pair<string,vector<float,allocator<float> > >*)p);
   }
   static void destruct_pairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR(void *p) {
      typedef pair<string,vector<float,allocator<float> > > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class pair<string,vector<float,allocator<float> > >

//______________________________________________________________________________
namespace ROOT {
   void pairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent)
   {
      // Inspect the data members of an object of class pair<const string,vector<float,allocator<float> > >.
      typedef ::ROOT::Shadow::pairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const pair<const string,vector<float,allocator<float> > >*)0x0)->GetClass();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "first", (void*)&sobj->first);
      ::ROOT::GenericShowMembers("const string", (void*)&sobj->first, R__insp, strcat(R__parent,"first."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "second", (void*)&sobj->second);
      ::ROOT::GenericShowMembers("vector<float,allocator<float> >", (void*)&sobj->second, R__insp, strcat(R__parent,"second."),false);
      R__parent[R__ncp] = 0;
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_pairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) pair<const string,vector<float,allocator<float> > > : new pair<const string,vector<float,allocator<float> > >;
   }
   static void *newArray_pairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) pair<const string,vector<float,allocator<float> > >[nElements] : new pair<const string,vector<float,allocator<float> > >[nElements];
   }
   // Wrapper around operator delete
   static void delete_pairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR(void *p) {
      delete ((pair<const string,vector<float,allocator<float> > >*)p);
   }
   static void deleteArray_pairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR(void *p) {
      delete [] ((pair<const string,vector<float,allocator<float> > >*)p);
   }
   static void destruct_pairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR(void *p) {
      typedef pair<const string,vector<float,allocator<float> > > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class pair<const string,vector<float,allocator<float> > >

namespace ROOT {
   void maplEstringcOboolgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void maplEstringcOboolgR_Dictionary();
   static void *new_maplEstringcOboolgR(void *p = 0);
   static void *newArray_maplEstringcOboolgR(Long_t size, void *p);
   static void delete_maplEstringcOboolgR(void *p);
   static void deleteArray_maplEstringcOboolgR(void *p);
   static void destruct_maplEstringcOboolgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,bool>*)
   {
      map<string,bool> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,bool>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,bool>", -2, "prec_stl/map", 63,
                  typeid(map<string,bool>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOboolgR_Dictionary, isa_proxy, 4,
                  sizeof(map<string,bool>) );
      instance.SetNew(&new_maplEstringcOboolgR);
      instance.SetNewArray(&newArray_maplEstringcOboolgR);
      instance.SetDelete(&delete_maplEstringcOboolgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOboolgR);
      instance.SetDestructor(&destruct_maplEstringcOboolgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,bool> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,bool>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOboolgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,bool>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOboolgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,bool> : new map<string,bool>;
   }
   static void *newArray_maplEstringcOboolgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,bool>[nElements] : new map<string,bool>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOboolgR(void *p) {
      delete ((map<string,bool>*)p);
   }
   static void deleteArray_maplEstringcOboolgR(void *p) {
      delete [] ((map<string,bool>*)p);
   }
   static void destruct_maplEstringcOboolgR(void *p) {
      typedef map<string,bool> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,bool>

namespace ROOT {
   void maplEstringcOvectorlEfloatgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void maplEstringcOvectorlEfloatgRsPgR_Dictionary();
   static void *new_maplEstringcOvectorlEfloatgRsPgR(void *p = 0);
   static void *newArray_maplEstringcOvectorlEfloatgRsPgR(Long_t size, void *p);
   static void delete_maplEstringcOvectorlEfloatgRsPgR(void *p);
   static void deleteArray_maplEstringcOvectorlEfloatgRsPgR(void *p);
   static void destruct_maplEstringcOvectorlEfloatgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,vector<float> >*)
   {
      map<string,vector<float> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,vector<float> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,vector<float> >", -2, "prec_stl/map", 63,
                  typeid(map<string,vector<float> >), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOvectorlEfloatgRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(map<string,vector<float> >) );
      instance.SetNew(&new_maplEstringcOvectorlEfloatgRsPgR);
      instance.SetNewArray(&newArray_maplEstringcOvectorlEfloatgRsPgR);
      instance.SetDelete(&delete_maplEstringcOvectorlEfloatgRsPgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOvectorlEfloatgRsPgR);
      instance.SetDestructor(&destruct_maplEstringcOvectorlEfloatgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,vector<float> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,vector<float> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOvectorlEfloatgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,vector<float> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOvectorlEfloatgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,vector<float> > : new map<string,vector<float> >;
   }
   static void *newArray_maplEstringcOvectorlEfloatgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,vector<float> >[nElements] : new map<string,vector<float> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOvectorlEfloatgRsPgR(void *p) {
      delete ((map<string,vector<float> >*)p);
   }
   static void deleteArray_maplEstringcOvectorlEfloatgRsPgR(void *p) {
      delete [] ((map<string,vector<float> >*)p);
   }
   static void destruct_maplEstringcOvectorlEfloatgRsPgR(void *p) {
      typedef map<string,vector<float> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,vector<float> >

namespace ROOT {
   void vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgR_Dictionary();
   static void *new_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgR(void *p = 0);
   static void *newArray_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgR(Long_t size, void *p);
   static void delete_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgR(void *p);
   static void deleteArray_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgR(void *p);
   static void destruct_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > >*)
   {
      vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > >", -2, "prec_stl/vector", 49,
                  typeid(vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > >), DefineBehavior(ptr, ptr),
                  0, &vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > >) );
      instance.SetNew(&new_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgR);
      instance.SetNewArray(&newArray_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgR);
      instance.SetDelete(&delete_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgR);
      instance.SetDestructor(&destruct_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > : new vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > >;
   }
   static void *newArray_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > >[nElements] : new vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgR(void *p) {
      delete ((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > >*)p);
   }
   static void deleteArray_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgR(void *p) {
      delete [] ((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > >*)p);
   }
   static void destruct_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgR(void *p) {
      typedef vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > >

namespace ROOT {
   void vectorlEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlEfloatgR_Dictionary();
   static void *new_vectorlEfloatgR(void *p = 0);
   static void *newArray_vectorlEfloatgR(Long_t size, void *p);
   static void delete_vectorlEfloatgR(void *p);
   static void deleteArray_vectorlEfloatgR(void *p);
   static void destruct_vectorlEfloatgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<float>*)
   {
      vector<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<float>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<float>", -2, "vector.dll", 0,
                  typeid(vector<float>), DefineBehavior(ptr, ptr),
                  0, &vectorlEfloatgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<float>) );
      instance.SetNew(&new_vectorlEfloatgR);
      instance.SetNewArray(&newArray_vectorlEfloatgR);
      instance.SetDelete(&delete_vectorlEfloatgR);
      instance.SetDeleteArray(&deleteArray_vectorlEfloatgR);
      instance.SetDestructor(&destruct_vectorlEfloatgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<float> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEfloatgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float> : new vector<float>;
   }
   static void *newArray_vectorlEfloatgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float>[nElements] : new vector<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEfloatgR(void *p) {
      delete ((vector<float>*)p);
   }
   static void deleteArray_vectorlEfloatgR(void *p) {
      delete [] ((vector<float>*)p);
   }
   static void destruct_vectorlEfloatgR(void *p) {
      typedef vector<float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<float>

/********************************************************
* myDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && (__GNUC__ > 3) && (__GNUC_MINOR__ > 1)
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtablemyDict();

extern "C" void G__set_cpp_environmentmyDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__cpp_reset_tagtablemyDict();
}
#include <new>
extern "C" int G__cpp_dllrevmyDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > > */
static int G__myDict_471_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >& obj = ((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >*) G__getstructoffset())->at((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_471_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator* pobj;
         vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator xobj = ((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >*) G__getstructoffset())->begin();
         pobj = new vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_471_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator* pobj;
         vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator xobj = ((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >*) G__getstructoffset())->end();
         pobj = new vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_471_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::reverse_iterator* pobj;
         vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::reverse_iterator xobj = ((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >*) G__getstructoffset())->rbegin();
         pobj = new vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_471_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::reverse_iterator* pobj;
         vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::reverse_iterator xobj = ((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >*) G__getstructoffset())->rend();
         pobj = new vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_471_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_471_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_471_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >*) G__getstructoffset())->resize((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_471_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >*) G__getstructoffset())->resize((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::size_type) G__int(libp->para[0]), *((ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_471_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_471_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_471_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >& obj = ((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >*) G__getstructoffset())->operator[]((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_471_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >[n];
     } else {
       p = new((void*) gvp) vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >;
     } else {
       p = new((void*) gvp) vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_471_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::size_type) G__int(libp->para[0]), *(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::size_type) G__int(libp->para[0]), *(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_471_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >(*(vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >(*(vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_471_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >(*((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::const_iterator*) G__int(libp->para[0])), *((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >(*((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::const_iterator*) G__int(libp->para[0])), *((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_471_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >& obj = ((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >*) G__getstructoffset())->operator=(*(vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_471_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >*) G__getstructoffset())->reserve((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_471_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >& obj = ((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_471_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >& obj = ((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_471_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >*) G__getstructoffset())->push_back(*(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_471_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >*) G__getstructoffset())->swap(*(vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_471_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator* pobj;
         vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator xobj = ((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >*) G__getstructoffset())->insert(*((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator*) G__int(libp->para[0])), *(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >*) libp->para[1].ref);
         pobj = new vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_471_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >*) G__getstructoffset())->insert(*((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator*) G__int(libp->para[0])), *((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::const_iterator*) G__int(libp->para[1]))
, *((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_471_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >*) G__getstructoffset())->insert(*((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator*) G__int(libp->para[0])), (vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::size_type) G__int(libp->para[1])
, *(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_471_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_471_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >*) G__getstructoffset())->erase(*((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_471_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >*) G__getstructoffset())->erase(*((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator*) G__int(libp->para[0])), *((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_471_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > > G__TvectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR;
static int G__myDict_471_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >*) (soff+(sizeof(vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >)*i)))->~G__TvectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >*) (soff))->~G__TvectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator */
static int G__myDict_472_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator[n];
     } else {
       p = new((void*) gvp) vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator;
     } else {
       p = new((void*) gvp) vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_472_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator(libp->para[0].ref ? *(const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator::pointer*) libp->para[0].ref : *(const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator::pointer*) (&G__Mlong(libp->para[0])));
   } else {
     p = new((void*) gvp) vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator(libp->para[0].ref ? *(const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator::pointer*) libp->para[0].ref : *(const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator::pointer*) (&G__Mlong(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_472_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator::reference obj = ((const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_472_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_472_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator& obj = ((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_472_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator* pobj;
         vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator xobj = ((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_472_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator& obj = ((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_472_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator* pobj;
         vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator xobj = ((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_472_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator::reference obj = ((const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator*) G__getstructoffset())->operator[](*(vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_472_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator& obj = ((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator*) G__getstructoffset())->operator+=(*(vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_472_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator* pobj;
         const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator xobj = ((const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator*) G__getstructoffset())->operator+(*(vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator::difference_type*) G__Longref(&libp->para[0]));
         pobj = new vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_472_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator& obj = ((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator*) G__getstructoffset())->operator-=(*(vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_472_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator* pobj;
         const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator xobj = ((const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator*) G__getstructoffset())->operator-(*(vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator::difference_type*) G__Longref(&libp->para[0]));
         pobj = new vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_472_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator::pointer& obj = ((const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator*) G__getstructoffset())->base();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_472_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator* pobj;
         vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator xobj = ((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator*) G__getstructoffset())->operator=(*(vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator*) libp->para[0].ref);
         pobj = new vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__myDict_472_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator(*(vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator G__TvectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator;
static int G__myDict_472_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator*) (soff+(sizeof(vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator)*i)))->~G__TvectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator*) (soff))->~G__TvectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<const string,bool> */
static int G__myDict_474_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<const string,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<const string,bool>[n];
     } else {
       p = new((void*) gvp) pair<const string,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<const string,bool>;
     } else {
       p = new((void*) gvp) pair<const string,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__myDictLN_pairlEconstsPstringcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_474_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<const string,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<const string,bool>(*(string*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   } else {
     p = new((void*) gvp) pair<const string,bool>(*(string*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__myDictLN_pairlEconstsPstringcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__myDict_474_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<const string,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<const string,bool>(*(pair<const string,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__myDictLN_pairlEconstsPstringcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<const string,bool> G__TpairlEconstsPstringcOboolgR;
static int G__myDict_474_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<const string,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<const string,bool>*) (soff+(sizeof(pair<const string,bool>)*i)))->~G__TpairlEconstsPstringcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<const string,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<const string,bool>*) (soff))->~G__TpairlEconstsPstringcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<string,bool,less<string>,allocator<pair<const string,bool> > > */
static int G__myDict_476_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,bool,less<string>,allocator<pair<const string,bool> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,bool,less<string>,allocator<pair<const string,bool> > >[n];
     } else {
       p = new((void*) gvp) map<string,bool,less<string>,allocator<pair<const string,bool> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,bool,less<string>,allocator<pair<const string,bool> > >;
     } else {
       p = new((void*) gvp) map<string,bool,less<string>,allocator<pair<const string,bool> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_476_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,bool,less<string>,allocator<pair<const string,bool> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,bool,less<string>,allocator<pair<const string,bool> > >(*((map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator*) G__int(libp->para[0])), *((map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<string,bool,less<string>,allocator<pair<const string,bool> > >(*((map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator*) G__int(libp->para[0])), *((map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_476_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,bool,less<string>,allocator<pair<const string,bool> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,bool,less<string>,allocator<pair<const string,bool> > >(*((map<string,bool,less<string>,allocator<pair<const string,bool> > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,bool,less<string>,allocator<pair<const string,bool> > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<string,bool,less<string>,allocator<pair<const string,bool> > >(*((map<string,bool,less<string>,allocator<pair<const string,bool> > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,bool,less<string>,allocator<pair<const string,bool> > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_476_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,bool,less<string>,allocator<pair<const string,bool> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,bool,less<string>,allocator<pair<const string,bool> > >(*(map<string,bool,less<string>,allocator<pair<const string,bool> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<string,bool,less<string>,allocator<pair<const string,bool> > >(*(map<string,bool,less<string>,allocator<pair<const string,bool> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_476_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,bool,less<string>,allocator<pair<const string,bool> > >& obj = ((map<string,bool,less<string>,allocator<pair<const string,bool> > >*) G__getstructoffset())->operator=(*(map<string,bool,less<string>,allocator<pair<const string,bool> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_476_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator* pobj;
         map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator xobj = ((map<string,bool,less<string>,allocator<pair<const string,bool> > >*) G__getstructoffset())->begin();
         pobj = new map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_476_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator* pobj;
         map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator xobj = ((map<string,bool,less<string>,allocator<pair<const string,bool> > >*) G__getstructoffset())->end();
         pobj = new map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_476_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,bool,less<string>,allocator<pair<const string,bool> > >::reverse_iterator* pobj;
         map<string,bool,less<string>,allocator<pair<const string,bool> > >::reverse_iterator xobj = ((map<string,bool,less<string>,allocator<pair<const string,bool> > >*) G__getstructoffset())->rbegin();
         pobj = new map<string,bool,less<string>,allocator<pair<const string,bool> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_476_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,bool,less<string>,allocator<pair<const string,bool> > >::reverse_iterator* pobj;
         map<string,bool,less<string>,allocator<pair<const string,bool> > >::reverse_iterator xobj = ((map<string,bool,less<string>,allocator<pair<const string,bool> > >*) G__getstructoffset())->rend();
         pobj = new map<string,bool,less<string>,allocator<pair<const string,bool> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_476_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const map<string,bool,less<string>,allocator<pair<const string,bool> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_476_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<string,bool,less<string>,allocator<pair<const string,bool> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_476_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<string,bool,less<string>,allocator<pair<const string,bool> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_476_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const bool& obj = ((map<string,bool,less<string>,allocator<pair<const string,bool> > >*) G__getstructoffset())->operator[](*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         G__letint(result7, 'g', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_476_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator,bool>* pobj;
         pair<map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator,bool> xobj = ((map<string,bool,less<string>,allocator<pair<const string,bool> > >*) G__getstructoffset())->insert(*(map<string,bool,less<string>,allocator<pair<const string,bool> > >::value_type*) libp->para[0].ref);
         pobj = new pair<map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_476_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator* pobj;
         map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator xobj = ((map<string,bool,less<string>,allocator<pair<const string,bool> > >*) G__getstructoffset())->insert(*((map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator*) G__int(libp->para[0])), *(map<string,bool,less<string>,allocator<pair<const string,bool> > >::value_type*) libp->para[1].ref);
         pobj = new map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_476_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,bool,less<string>,allocator<pair<const string,bool> > >*) G__getstructoffset())->insert(*((map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator*) G__int(libp->para[0])), *((map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_476_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,bool,less<string>,allocator<pair<const string,bool> > >*) G__getstructoffset())->insert(*((map<string,bool,less<string>,allocator<pair<const string,bool> > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,bool,less<string>,allocator<pair<const string,bool> > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_476_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,bool,less<string>,allocator<pair<const string,bool> > >*) G__getstructoffset())->erase(*((map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_476_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((map<string,bool,less<string>,allocator<pair<const string,bool> > >*) G__getstructoffset())->erase(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_476_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,bool,less<string>,allocator<pair<const string,bool> > >*) G__getstructoffset())->erase(*((map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator*) G__int(libp->para[0])), *((map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_476_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,bool,less<string>,allocator<pair<const string,bool> > >*) G__getstructoffset())->swap(*(map<string,bool,less<string>,allocator<pair<const string,bool> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_476_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,bool,less<string>,allocator<pair<const string,bool> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_476_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator* pobj;
         map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator xobj = ((map<string,bool,less<string>,allocator<pair<const string,bool> > >*) G__getstructoffset())->find(*(string*) libp->para[0].ref);
         pobj = new map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_476_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<string,bool,less<string>,allocator<pair<const string,bool> > >*) G__getstructoffset())->count(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_476_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator* pobj;
         map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator xobj = ((map<string,bool,less<string>,allocator<pair<const string,bool> > >*) G__getstructoffset())->lower_bound(*(string*) libp->para[0].ref);
         pobj = new map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_476_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator* pobj;
         map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator xobj = ((map<string,bool,less<string>,allocator<pair<const string,bool> > >*) G__getstructoffset())->upper_bound(*(string*) libp->para[0].ref);
         pobj = new map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<string,bool,less<string>,allocator<pair<const string,bool> > > G__TmaplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR;
static int G__myDict_476_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<string,bool,less<string>,allocator<pair<const string,bool> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<string,bool,less<string>,allocator<pair<const string,bool> > >*) (soff+(sizeof(map<string,bool,less<string>,allocator<pair<const string,bool> > >)*i)))->~G__TmaplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<string,bool,less<string>,allocator<pair<const string,bool> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<string,bool,less<string>,allocator<pair<const string,bool> > >*) (soff))->~G__TmaplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<string,bool> */
static int G__myDict_477_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<string,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<string,bool>[n];
     } else {
       p = new((void*) gvp) pair<string,bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<string,bool>;
     } else {
       p = new((void*) gvp) pair<string,bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__myDictLN_pairlEstringcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_477_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<string,bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<string,bool>(*(string*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   } else {
     p = new((void*) gvp) pair<string,bool>(*(string*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__myDictLN_pairlEstringcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__myDict_477_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<string,bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<string,bool>(*(pair<string,bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__myDictLN_pairlEstringcOboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<string,bool> G__TpairlEstringcOboolgR;
static int G__myDict_477_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<string,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<string,bool>*) (soff+(sizeof(pair<string,bool>)*i)))->~G__TpairlEstringcOboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<string,bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<string,bool>*) (soff))->~G__TpairlEstringcOboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator */
static int G__myDict_478_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator[n];
     } else {
       p = new((void*) gvp) map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator;
     } else {
       p = new((void*) gvp) map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_478_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator(*(map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator(*(map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_478_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator& obj = ((map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator*) G__getstructoffset())->operator=(*(map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_478_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,bool,less<string>,allocator<pair<const string,bool> > >::value_type& obj = ((map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_478_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_478_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator& obj = ((map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_478_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator* pobj;
         map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator xobj = ((map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_478_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator& obj = ((map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_478_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator* pobj;
         map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator xobj = ((map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_478_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator*) G__getstructoffset())->operator==(*(map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_478_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator*) G__getstructoffset())->operator!=(*(map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator G__TmaplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator;
static int G__myDict_478_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator*) (soff+(sizeof(map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator)*i)))->~G__TmaplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator*) (soff))->~G__TmaplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<const string,vector<float,allocator<float> > > */
static int G__myDict_481_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<const string,vector<float,allocator<float> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<const string,vector<float,allocator<float> > >[n];
     } else {
       p = new((void*) gvp) pair<const string,vector<float,allocator<float> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<const string,vector<float,allocator<float> > >;
     } else {
       p = new((void*) gvp) pair<const string,vector<float,allocator<float> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__myDictLN_pairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_481_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<const string,vector<float,allocator<float> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<const string,vector<float,allocator<float> > >(*(string*) libp->para[0].ref, *(vector<float,allocator<float> >*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) pair<const string,vector<float,allocator<float> > >(*(string*) libp->para[0].ref, *(vector<float,allocator<float> >*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__myDictLN_pairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__myDict_481_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<const string,vector<float,allocator<float> > >* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<const string,vector<float,allocator<float> > >(*(pair<const string,vector<float,allocator<float> > >*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__myDictLN_pairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<const string,vector<float,allocator<float> > > G__TpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR;
static int G__myDict_481_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<const string,vector<float,allocator<float> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<const string,vector<float,allocator<float> > >*) (soff+(sizeof(pair<const string,vector<float,allocator<float> > >)*i)))->~G__TpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<const string,vector<float,allocator<float> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<const string,vector<float,allocator<float> > >*) (soff))->~G__TpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > > */
static int G__myDict_483_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >[n];
     } else {
       p = new((void*) gvp) map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >;
     } else {
       p = new((void*) gvp) map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_483_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >(*((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator*) G__int(libp->para[0])), *((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >(*((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator*) G__int(libp->para[0])), *((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_483_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >(*((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >(*((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_483_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >(*(map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >(*(map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_483_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >& obj = ((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >*) G__getstructoffset())->operator=(*(map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_483_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator* pobj;
         map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator xobj = ((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >*) G__getstructoffset())->begin();
         pobj = new map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_483_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator* pobj;
         map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator xobj = ((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >*) G__getstructoffset())->end();
         pobj = new map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_483_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::reverse_iterator* pobj;
         map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::reverse_iterator xobj = ((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >*) G__getstructoffset())->rbegin();
         pobj = new map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_483_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::reverse_iterator* pobj;
         map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::reverse_iterator xobj = ((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >*) G__getstructoffset())->rend();
         pobj = new map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_483_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_483_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_483_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_483_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<float,allocator<float> >& obj = ((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >*) G__getstructoffset())->operator[](*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_483_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator,bool>* pobj;
         pair<map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator,bool> xobj = ((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >*) G__getstructoffset())->insert(*(map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::value_type*) libp->para[0].ref);
         pobj = new pair<map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_483_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator* pobj;
         map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator xobj = ((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >*) G__getstructoffset())->insert(*((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator*) G__int(libp->para[0])), *(map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::value_type*) libp->para[1].ref);
         pobj = new map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_483_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >*) G__getstructoffset())->insert(*((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator*) G__int(libp->para[0])), *((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_483_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >*) G__getstructoffset())->insert(*((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_483_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >*) G__getstructoffset())->erase(*((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_483_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >*) G__getstructoffset())->erase(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_483_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >*) G__getstructoffset())->erase(*((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator*) G__int(libp->para[0])), *((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_483_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >*) G__getstructoffset())->swap(*(map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_483_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_483_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator* pobj;
         map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator xobj = ((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >*) G__getstructoffset())->find(*(string*) libp->para[0].ref);
         pobj = new map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_483_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >*) G__getstructoffset())->count(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_483_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator* pobj;
         map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator xobj = ((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >*) G__getstructoffset())->lower_bound(*(string*) libp->para[0].ref);
         pobj = new map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_483_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator* pobj;
         map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator xobj = ((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >*) G__getstructoffset())->upper_bound(*(string*) libp->para[0].ref);
         pobj = new map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > > G__TmaplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR;
static int G__myDict_483_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >*) (soff+(sizeof(map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >)*i)))->~G__TmaplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >*) (soff))->~G__TmaplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<string,vector<float,allocator<float> > > */
static int G__myDict_484_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<string,vector<float,allocator<float> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<string,vector<float,allocator<float> > >[n];
     } else {
       p = new((void*) gvp) pair<string,vector<float,allocator<float> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<string,vector<float,allocator<float> > >;
     } else {
       p = new((void*) gvp) pair<string,vector<float,allocator<float> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__myDictLN_pairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_484_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<string,vector<float,allocator<float> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<string,vector<float,allocator<float> > >(*(string*) libp->para[0].ref, *(vector<float,allocator<float> >*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) pair<string,vector<float,allocator<float> > >(*(string*) libp->para[0].ref, *(vector<float,allocator<float> >*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__myDictLN_pairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__myDict_484_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<string,vector<float,allocator<float> > >* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<string,vector<float,allocator<float> > >(*(pair<string,vector<float,allocator<float> > >*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__myDictLN_pairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<string,vector<float,allocator<float> > > G__TpairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR;
static int G__myDict_484_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<string,vector<float,allocator<float> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<string,vector<float,allocator<float> > >*) (soff+(sizeof(pair<string,vector<float,allocator<float> > >)*i)))->~G__TpairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<string,vector<float,allocator<float> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<string,vector<float,allocator<float> > >*) (soff))->~G__TpairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator */
static int G__myDict_485_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator[n];
     } else {
       p = new((void*) gvp) map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator;
     } else {
       p = new((void*) gvp) map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_485_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator(*(map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator(*(map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_485_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator& obj = ((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator*) G__getstructoffset())->operator=(*(map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_485_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::value_type& obj = ((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_485_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_485_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator& obj = ((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_485_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator* pobj;
         map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator xobj = ((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_485_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator& obj = ((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_485_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator* pobj;
         map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator xobj = ((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_485_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator*) G__getstructoffset())->operator==(*(map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_485_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator*) G__getstructoffset())->operator!=(*(map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator G__TmaplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator;
static int G__myDict_485_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator*) (soff+(sizeof(map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator)*i)))->~G__TmaplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator*) (soff))->~G__TmaplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > > */

/* vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator */

/* pair<const string,bool> */

/* map<string,bool,less<string>,allocator<pair<const string,bool> > > */

/* pair<string,bool> */

/* map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator */

/* pair<const string,vector<float,allocator<float> > > */

/* map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > > */

/* pair<string,vector<float,allocator<float> > > */

/* map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncmyDict {
 public:
  G__Sizep2memfuncmyDict(): p(&G__Sizep2memfuncmyDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncmyDict::*p)();
};

size_t G__get_sizep2memfuncmyDict()
{
  G__Sizep2memfuncmyDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancemyDict() {

   /* Setting up class inheritance */
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetablemyDict() {

   /* Setting up typedef entry */
   G__search_typename2("vector<TSchemaHelper>",117,G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__myDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__myDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__myDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__myDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__myDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__myDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__myDictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__myDictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__myDictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__myDictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__myDictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__myDictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__myDictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__myDictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__myDictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__myDictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__myDictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__myDictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__myDictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__myDictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__myDictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__myDictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__myDictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("LorentzP4V",117,G__get_linked_tagnum(&G__myDictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<LorentzP4V>",117,G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__myDictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgR),0,G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__myDictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgR),0,G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__myDictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgR),256,G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__myDictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgR),1,G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__myDictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgR),257,G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__myDictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgR),0,G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__myDictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgR),0,G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__myDictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgR),1,G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__myDictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgR),1,G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__myDictLN_reverse_iteratorlEvectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__myDictLN_reverse_iteratorlEvectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__myDictLN_reverse_iteratorlEvectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__myDictLN_reverse_iteratorlEvectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > >",117,G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("LorentzP4Vs",117,G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,bool>",117,G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",117,G__get_linked_tagnum(&G__myDictLN_string),0,G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",103,-1,0,G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__myDictLN_pairlEstringcOboolgR),0,G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__myDictLN_lesslEstringgR),0,G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__myDictLN_allocatorlEpairlEconstsPstringcOboolgRsPgR),0,G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,bool>",117,G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,bool,less<string> >",117,G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("stringtobool",117,G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,int>",117,G__get_linked_tagnum(&G__myDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("stringtoint",117,G__get_linked_tagnum(&G__myDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,std::vector<float> >",117,G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",117,G__get_linked_tagnum(&G__myDictLN_string),0,G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",117,G__get_linked_tagnum(&G__myDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),0,G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__myDictLN_pairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR),0,G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__myDictLN_lesslEstringgR),0,G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__myDictLN_allocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR),0,G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<float,allocator<float> > >",117,G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<float,allocator<float> >,less<string> >",117,G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("stringtovfloat",117,G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<std::string,bool>",117,G__get_linked_tagnum(&G__myDictLN_pairlEstringcOboolgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<const std::string,bool>",117,G__get_linked_tagnum(&G__myDictLN_pairlEconstsPstringcOboolgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<std::string,std::vector<float> >",117,G__get_linked_tagnum(&G__myDictLN_pairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<const std::string,std::vector<float> >",117,G__get_linked_tagnum(&G__myDictLN_pairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > > */
static void G__setup_memvarvectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR));
   { vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > > *p; p=(vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator */
static void G__setup_memvarvectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator));
   { vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator *p; p=(vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<const string,bool> */
static void G__setup_memvarpairlEconstsPstringcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__myDictLN_pairlEconstsPstringcOboolgR));
   { pair<const string,bool> *p; p=(pair<const string,bool>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),117,0,1,G__get_linked_tagnum(&G__myDictLN_string),-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),103,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* map<string,bool,less<string>,allocator<pair<const string,bool> > > */
static void G__setup_memvarmaplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR));
   { map<string,bool,less<string>,allocator<pair<const string,bool> > > *p; p=(map<string,bool,less<string>,allocator<pair<const string,bool> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<string,bool> */
static void G__setup_memvarpairlEstringcOboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__myDictLN_pairlEstringcOboolgR));
   { pair<string,bool> *p; p=(pair<string,bool>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__myDictLN_string),-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),103,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator */
static void G__setup_memvarmaplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator));
   { map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator *p; p=(map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<const string,vector<float,allocator<float> > > */
static void G__setup_memvarpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__myDictLN_pairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR));
   { pair<const string,vector<float,allocator<float> > > *p; p=(pair<const string,vector<float,allocator<float> > >*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),117,0,1,G__get_linked_tagnum(&G__myDictLN_string),-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__myDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > > */
static void G__setup_memvarmaplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR));
   { map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > > *p; p=(map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<string,vector<float,allocator<float> > > */
static void G__setup_memvarpairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__myDictLN_pairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR));
   { pair<string,vector<float,allocator<float> > > *p; p=(pair<string,vector<float,allocator<float> > >*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__myDictLN_string),-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__myDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator */
static void G__setup_memvarmaplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator));
   { map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator *p; p=(map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarmyDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncvectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR(void) {
   /* vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR));
   G__memfunc_setup("at",213,G__myDict_471_0_1, 117, G__get_linked_tagnum(&G__myDictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgR), -1, 1, 1, 1, 1, 0, "h - 'vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__myDict_471_0_2, 117, G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__myDict_471_0_3, 117, G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__myDict_471_0_4, 117, G__get_linked_tagnum(&G__myDictLN_reverse_iteratorlEvectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__myDict_471_0_5, 117, G__get_linked_tagnum(&G__myDictLN_reverse_iteratorlEvectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__myDict_471_0_6, 104, -1, G__defined_typename("vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__myDict_471_0_7, 104, -1, G__defined_typename("vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__myDict_471_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__myDict_471_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::size_type' 0 - sz u 'ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__myDict_471_0_10, 104, -1, G__defined_typename("vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__myDict_471_0_11, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__myDict_471_0_12, 117, G__get_linked_tagnum(&G__myDictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgR), -1, 1, 1, 1, 1, 0, "h - 'vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >",11932,G__myDict_471_0_13, 105, G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >",11932,G__myDict_471_0_14, 105, G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"h - 'vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::size_type' 0 - n u 'ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >' - 11 '(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >)()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >",11932,G__myDict_471_0_15, 105, G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >",11932,G__myDict_471_0_16, 105, G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator' 'vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::const_iterator' 10 - first u 'vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator' 'vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__myDict_471_0_17, 117, G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__myDict_471_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__myDict_471_0_19, 117, G__get_linked_tagnum(&G__myDictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__myDict_471_0_20, 117, G__get_linked_tagnum(&G__myDictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__myDict_471_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__myDict_471_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__myDict_471_0_23, 117, G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator' - 0 - position u 'ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__myDict_471_0_24, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator' - 0 - position u 'vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator' 'vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::const_iterator' 10 - first "
"u 'vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator' 'vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__myDict_471_0_25, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator' - 0 - position h - 'vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::size_type' 0 - n "
"u 'ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__myDict_471_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__myDict_471_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__myDict_471_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator' - 0 - first u 'vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__myDict_471_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >", 12058, G__myDict_471_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator(void) {
   /* vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__myDict_472_0_1, 105, G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__myDict_472_0_2, 105, G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 5, 1, 0, "U 'ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >' 'vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator::pointer' 11 - __i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__myDict_472_0_3, 117, G__get_linked_tagnum(&G__myDictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgR), G__defined_typename("vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator::reference"), 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__myDict_472_0_4, 85, G__get_linked_tagnum(&G__myDictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgR), G__defined_typename("vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator::pointer"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__myDict_472_0_5, 117, G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__myDict_472_0_6, 117, G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__myDict_472_0_7, 117, G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__myDict_472_0_8, 117, G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__myDict_472_0_9, 117, G__get_linked_tagnum(&G__myDictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgR), G__defined_typename("vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator::reference"), 1, 1, 1, 1, 8, "l - 'vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__myDict_472_0_10, 117, G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "l - 'vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__myDict_472_0_11, 117, G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - 'vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__myDict_472_0_12, 117, G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "l - 'vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__myDict_472_0_13, 117, G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - 'vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("base",411,G__myDict_472_0_14, 85, G__get_linked_tagnum(&G__myDictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgR), G__defined_typename("vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator::pointer"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__myDict_472_0_15, 117, G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("iterator", 874, G__myDict_472_0_16, (int) ('i'), G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__myDict_472_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEconstsPstringcOboolgR(void) {
   /* pair<const string,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__myDictLN_pairlEconstsPstringcOboolgR));
   G__memfunc_setup("pair<const string,bool>",2268,G__myDict_474_0_1, 105, G__get_linked_tagnum(&G__myDictLN_pairlEconstsPstringcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<const string,bool>",2268,G__myDict_474_0_2, 105, G__get_linked_tagnum(&G__myDictLN_pairlEconstsPstringcOboolgR), -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - a g - - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__myDictLN_pairlEconstsPstringcOboolgR), -1, 1, 1, 1, 4, 0, "u 'pair<const string,bool>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<const string,bool>", 2268, G__myDict_474_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__myDictLN_pairlEconstsPstringcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<const string,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<const string,bool>", 2394, G__myDict_474_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR(void) {
   /* map<string,bool,less<string>,allocator<pair<const string,bool> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR));
   G__memfunc_setup("map<string,bool,less<string>,allocator<pair<const string,bool> > >",6302,G__myDict_476_0_1, 105, G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,bool,less<string>,allocator<pair<const string,bool> > >",6302,G__myDict_476_0_2, 105, G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator' - 0 - first u 'map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,bool,less<string>,allocator<pair<const string,bool> > >",6302,G__myDict_476_0_3, 105, G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<string,bool,less<string>,allocator<pair<const string,bool> > >::reverse_iterator' - 0 - first u 'map<string,bool,less<string>,allocator<pair<const string,bool> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,bool,less<string>,allocator<pair<const string,bool> > >",6302,G__myDict_476_0_4, 105, G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'map<string,bool,less<string>,allocator<pair<const string,bool> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__myDict_476_0_5, 117, G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'map<string,bool,less<string>,allocator<pair<const string,bool> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__myDict_476_0_6, 117, G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__myDict_476_0_7, 117, G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__myDict_476_0_8, 117, G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__myDict_476_0_9, 117, G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__myDict_476_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__myDict_476_0_11, 104, -1, G__defined_typename("map<string,bool,less<string>,allocator<pair<const string,bool> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__myDict_476_0_12, 104, -1, G__defined_typename("map<string,bool,less<string>,allocator<pair<const string,bool> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__myDict_476_0_13, 103, -1, -1, 1, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__myDict_476_0_14, 117, G__get_linked_tagnum(&G__myDictLN_pairlEmaplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<string,bool>' 'map<string,bool,less<string>,allocator<pair<const string,bool> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__myDict_476_0_15, 117, G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator' - 0 - position u 'pair<string,bool>' 'map<string,bool,less<string>,allocator<pair<const string,bool> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__myDict_476_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator' - 0 - first u 'map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__myDict_476_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,bool,less<string>,allocator<pair<const string,bool> > >::reverse_iterator' - 0 - first u 'map<string,bool,less<string>,allocator<pair<const string,bool> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__myDict_476_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__myDict_476_0_19, 104, -1, G__defined_typename("map<string,bool,less<string>,allocator<pair<const string,bool> > >::size_type"), 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__myDict_476_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator' - 0 - first u 'map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__myDict_476_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,bool,less<string>,allocator<pair<const string,bool> > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__myDict_476_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__myDict_476_0_23, 117, G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__myDict_476_0_24, 104, -1, G__defined_typename("map<string,bool,less<string>,allocator<pair<const string,bool> > >::size_type"), 0, 1, 1, 1, 8, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__myDict_476_0_25, 117, G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__myDict_476_0_26, 117, G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~map<string,bool,less<string>,allocator<pair<const string,bool> > >", 6428, G__myDict_476_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEstringcOboolgR(void) {
   /* pair<string,bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__myDictLN_pairlEstringcOboolgR));
   G__memfunc_setup("pair<string,bool>",1685,G__myDict_477_0_1, 105, G__get_linked_tagnum(&G__myDictLN_pairlEstringcOboolgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<string,bool>",1685,G__myDict_477_0_2, 105, G__get_linked_tagnum(&G__myDictLN_pairlEstringcOboolgR), -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - a g - - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__myDictLN_pairlEstringcOboolgR), -1, 1, 1, 1, 4, 0, "u 'pair<string,bool>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<string,bool>", 1685, G__myDict_477_0_4, (int) ('i'), G__get_linked_tagnum(&G__myDictLN_pairlEstringcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<string,bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<string,bool>", 1811, G__myDict_477_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator(void) {
   /* map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__myDict_478_0_1, 105, G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__myDict_478_0_2, 105, G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__myDict_478_0_3, 117, G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__myDict_478_0_4, 117, G__get_linked_tagnum(&G__myDictLN_pairlEstringcOboolgR), G__defined_typename("map<string,bool,less<string>,allocator<pair<const string,bool> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__myDict_478_0_5, 85, G__get_linked_tagnum(&G__myDictLN_pairlEstringcOboolgR), G__defined_typename("map<string,bool,less<string>,allocator<pair<const string,bool> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__myDict_478_0_6, 117, G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__myDict_478_0_7, 117, G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__myDict_478_0_8, 117, G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__myDict_478_0_9, 117, G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__myDict_478_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__myDict_478_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__myDict_478_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR(void) {
   /* pair<const string,vector<float,allocator<float> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__myDictLN_pairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR));
   G__memfunc_setup("pair<const string,vector<float,allocator<float> > >",4880,G__myDict_481_0_1, 105, G__get_linked_tagnum(&G__myDictLN_pairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<const string,vector<float,allocator<float> > >",4880,G__myDict_481_0_2, 105, G__get_linked_tagnum(&G__myDictLN_pairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - a u 'vector<float,allocator<float> >' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__myDictLN_pairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR), -1, 1, 1, 1, 4, 0, "u 'pair<const string,vector<float,allocator<float> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<const string,vector<float,allocator<float> > >", 4880, G__myDict_481_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__myDictLN_pairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'pair<const string,vector<float,allocator<float> > >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<const string,vector<float,allocator<float> > >", 5006, G__myDict_481_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR(void) {
   /* map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR));
   G__memfunc_setup("map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >",11494,G__myDict_483_0_1, 105, G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >",11494,G__myDict_483_0_2, 105, G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator' - 0 - first u 'map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >",11494,G__myDict_483_0_3, 105, G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::reverse_iterator' - 0 - first u 'map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >",11494,G__myDict_483_0_4, 105, G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__myDict_483_0_5, 117, G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__myDict_483_0_6, 117, G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__myDict_483_0_7, 117, G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__myDict_483_0_8, 117, G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__myDict_483_0_9, 117, G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__myDict_483_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__myDict_483_0_11, 104, -1, G__defined_typename("map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__myDict_483_0_12, 104, -1, G__defined_typename("map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__myDict_483_0_13, 117, G__get_linked_tagnum(&G__myDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR), -1, 1, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__myDict_483_0_14, 117, G__get_linked_tagnum(&G__myDictLN_pairlEmaplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<string,vector<float,allocator<float> > >' 'map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__myDict_483_0_15, 117, G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator' - 0 - position u 'pair<string,vector<float,allocator<float> > >' 'map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__myDict_483_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator' - 0 - first u 'map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__myDict_483_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::reverse_iterator' - 0 - first u 'map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__myDict_483_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__myDict_483_0_19, 104, -1, G__defined_typename("map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::size_type"), 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__myDict_483_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator' - 0 - first u 'map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__myDict_483_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__myDict_483_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__myDict_483_0_23, 117, G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__myDict_483_0_24, 104, -1, G__defined_typename("map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::size_type"), 0, 1, 1, 1, 8, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__myDict_483_0_25, 117, G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__myDict_483_0_26, 117, G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >", 11620, G__myDict_483_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR(void) {
   /* pair<string,vector<float,allocator<float> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__myDictLN_pairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR));
   G__memfunc_setup("pair<string,vector<float,allocator<float> > >",4297,G__myDict_484_0_1, 105, G__get_linked_tagnum(&G__myDictLN_pairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<string,vector<float,allocator<float> > >",4297,G__myDict_484_0_2, 105, G__get_linked_tagnum(&G__myDictLN_pairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - a u 'vector<float,allocator<float> >' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__myDictLN_pairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR), -1, 1, 1, 1, 4, 0, "u 'pair<string,vector<float,allocator<float> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<string,vector<float,allocator<float> > >", 4297, G__myDict_484_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__myDictLN_pairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'pair<string,vector<float,allocator<float> > >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<string,vector<float,allocator<float> > >", 4423, G__myDict_484_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator(void) {
   /* map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__myDict_485_0_1, 105, G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__myDict_485_0_2, 105, G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__myDict_485_0_3, 117, G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__myDict_485_0_4, 117, G__get_linked_tagnum(&G__myDictLN_pairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR), G__defined_typename("map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__myDict_485_0_5, 85, G__get_linked_tagnum(&G__myDictLN_pairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR), G__defined_typename("map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__myDict_485_0_6, 117, G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__myDict_485_0_7, 117, G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__myDict_485_0_8, 117, G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__myDict_485_0_9, 117, G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__myDict_485_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__myDict_485_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__myDict_485_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncmyDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalmyDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcmyDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__myDictLN_ROOT = { "ROOT" , 110 , -1 };
G__linked_taginfo G__myDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR = { "vector<float,allocator<float> >" , 99 , -1 };
G__linked_taginfo G__myDictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__myDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__myDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__myDictLN_lesslEstringgR = { "less<string>" , 115 , -1 };
G__linked_taginfo G__myDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR = { "map<string,int,less<string>,allocator<pair<const string,int> > >" , 99 , -1 };
G__linked_taginfo G__myDictLN_ROOTcLcLMath = { "ROOT::Math" , 110 , -1 };
G__linked_taginfo G__myDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__myDictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgR = { "ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >" , 99 , -1 };
G__linked_taginfo G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR = { "vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >" , 99 , -1 };
G__linked_taginfo G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator = { "vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator" , 99 , -1 };
G__linked_taginfo G__myDictLN_reverse_iteratorlEvectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__myDictLN_pairlEconstsPstringcOboolgR = { "pair<const string,bool>" , 115 , -1 };
G__linked_taginfo G__myDictLN_allocatorlEpairlEconstsPstringcOboolgRsPgR = { "allocator<pair<const string,bool> >" , 99 , -1 };
G__linked_taginfo G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR = { "map<string,bool,less<string>,allocator<pair<const string,bool> > >" , 99 , -1 };
G__linked_taginfo G__myDictLN_pairlEstringcOboolgR = { "pair<string,bool>" , 115 , -1 };
G__linked_taginfo G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator = { "map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator" , 99 , -1 };
G__linked_taginfo G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLreverse_iterator = { "map<string,bool,less<string>,allocator<pair<const string,bool> > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__myDictLN_pairlEmaplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiteratorcOboolgR = { "pair<map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G__myDictLN_pairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR = { "pair<const string,vector<float,allocator<float> > >" , 115 , -1 };
G__linked_taginfo G__myDictLN_allocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR = { "allocator<pair<const string,vector<float,allocator<float> > > >" , 99 , -1 };
G__linked_taginfo G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR = { "map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >" , 99 , -1 };
G__linked_taginfo G__myDictLN_pairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR = { "pair<string,vector<float,allocator<float> > >" , 115 , -1 };
G__linked_taginfo G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator = { "map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator" , 99 , -1 };
G__linked_taginfo G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLreverse_iterator = { "map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__myDictLN_pairlEmaplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiteratorcOboolgR = { "pair<map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator,bool>" , 115 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtablemyDict() {
  G__myDictLN_ROOT.tagnum = -1 ;
  G__myDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR.tagnum = -1 ;
  G__myDictLN_string.tagnum = -1 ;
  G__myDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__myDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__myDictLN_lesslEstringgR.tagnum = -1 ;
  G__myDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR.tagnum = -1 ;
  G__myDictLN_ROOTcLcLMath.tagnum = -1 ;
  G__myDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__myDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__myDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__myDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__myDictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__myDictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__myDictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__myDictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__myDictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__myDictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__myDictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__myDictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__myDictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__myDictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__myDictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__myDictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__myDictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__myDictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__myDictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__myDictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__myDictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__myDictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgR.tagnum = -1 ;
  G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR.tagnum = -1 ;
  G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__myDictLN_reverse_iteratorlEvectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__myDictLN_pairlEconstsPstringcOboolgR.tagnum = -1 ;
  G__myDictLN_allocatorlEpairlEconstsPstringcOboolgRsPgR.tagnum = -1 ;
  G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR.tagnum = -1 ;
  G__myDictLN_pairlEstringcOboolgR.tagnum = -1 ;
  G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__myDictLN_pairlEmaplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G__myDictLN_pairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR.tagnum = -1 ;
  G__myDictLN_allocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR.tagnum = -1 ;
  G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__myDictLN_pairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR.tagnum = -1 ;
  G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__myDictLN_pairlEmaplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtablemyDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__myDictLN_ROOT);
   G__get_linked_tagnum_fwd(&G__myDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_string);
   G__get_linked_tagnum_fwd(&G__myDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_lesslEstringgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_ROOTcLcLMath);
   G__get_linked_tagnum_fwd(&G__myDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR),sizeof(vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >),-1,298752,(char*)NULL,G__setup_memvarvectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR,G__setup_memfuncvectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator),sizeof(vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >,allocator<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> > > >::iterator),-1,35072,(char*)NULL,G__setup_memvarvectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator,G__setup_memfuncvectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__myDictLN_reverse_iteratorlEvectorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRcOallocatorlEROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPxPyPzE4DlEdoublegRsPgRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__myDictLN_pairlEconstsPstringcOboolgR),sizeof(pair<const string,bool>),-1,297216,(char*)NULL,G__setup_memvarpairlEconstsPstringcOboolgR,G__setup_memfuncpairlEconstsPstringcOboolgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_allocatorlEpairlEconstsPstringcOboolgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR),sizeof(map<string,bool,less<string>,allocator<pair<const string,bool> > >),-1,298752,(char*)NULL,G__setup_memvarmaplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR,G__setup_memfuncmaplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__myDictLN_pairlEstringcOboolgR),sizeof(pair<string,bool>),-1,297216,(char*)NULL,G__setup_memvarpairlEstringcOboolgR,G__setup_memfuncpairlEstringcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator),sizeof(map<string,bool,less<string>,allocator<pair<const string,bool> > >::iterator),-1,2816,(char*)NULL,G__setup_memvarmaplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator,G__setup_memfuncmaplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__myDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLreverse_iterator);
   G__get_linked_tagnum_fwd(&G__myDictLN_pairlEmaplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgRcLcLiteratorcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__myDictLN_pairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR),sizeof(pair<const string,vector<float,allocator<float> > >),-1,297216,(char*)NULL,G__setup_memvarpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR,G__setup_memfuncpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_allocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR),sizeof(map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >),-1,298752,(char*)NULL,G__setup_memvarmaplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR,G__setup_memfuncmaplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__myDictLN_pairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR),sizeof(pair<string,vector<float,allocator<float> > >),-1,297216,(char*)NULL,G__setup_memvarpairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR,G__setup_memfuncpairlEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator),sizeof(map<string,vector<float,allocator<float> >,less<string>,allocator<pair<const string,vector<float,allocator<float> > > > >::iterator),-1,2816,(char*)NULL,G__setup_memvarmaplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator,G__setup_memfuncmaplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__myDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLreverse_iterator);
   G__get_linked_tagnum_fwd(&G__myDictLN_pairlEmaplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRcLcLiteratorcOboolgR);
}
extern "C" void G__cpp_setupmyDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupmyDict()");
  G__set_cpp_environmentmyDict();
  G__cpp_setup_tagtablemyDict();

  G__cpp_setup_inheritancemyDict();

  G__cpp_setup_typetablemyDict();

  G__cpp_setup_memvarmyDict();

  G__cpp_setup_memfuncmyDict();
  G__cpp_setup_globalmyDict();
  G__cpp_setup_funcmyDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncmyDict();
  return;
}
class G__cpp_setup_initmyDict {
  public:
    G__cpp_setup_initmyDict() { G__add_setup_func("myDict",(G__incsetup)(&G__cpp_setupmyDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initmyDict() { G__remove_setup_func("myDict"); }
};
G__cpp_setup_initmyDict G__cpp_setup_initializermyDict;

